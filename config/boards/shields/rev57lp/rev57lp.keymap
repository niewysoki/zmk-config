/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MT_MACRO(SHORT, FULL, LABELSTR, KEY, MOD) \
/ { \
    behaviors { \
        SHORT: FULL { \
            compatible = "zmk,behavior-tap-dance"; \
            label = "#LABELSTR"; \
            #binding-cells = <0>; \
            tapping-term-ms = <150>; \
            bindings = <&mt MOD KEY>, <&kp KEY>; \
        }; \
    }; \
};

#define LT_MACRO(SHORT, FULL, LABELSTR, KEY, LAYER) \
/ { \
    behaviors { \
        SHORT: FULL { \
            compatible = "zmk,behavior-tap-dance"; \
            label = "#LABELSTR"; \
            #binding-cells = <0>; \
            tapping-term-ms = <150>; \
            bindings = <&lt LAYER KEY>, <&kp KEY>; \
        }; \
    }; \
};

#define TWO_KEYS_COMBO_ONE_KEYPRESS(NAME, POS1, POS2, KEY) \
        NAME { \
            timeout-ms = <50>; \
            key-positions = <POS1 POS2>; \
            bindings = <&kp KEY>; \
        };

#define BASE       0
#define NUMPAD     1
#define NAVIGATION 2
#define BLUETOOTH  3
#define QWERTY     4

MT_MACRO(hm_m, m_homerow_mod, M_HOMEROW_MOD, M, RALT)
MT_MACRO(hm_n, n_homerow_mod, N_HOMEROW_MOD, N, LSHFT)
MT_MACRO(hm_e, e_homerow_mod, E_HOMEROW_MOD, E, LCTRL)
MT_MACRO(hm_i, i_homerow_mod, I_HOMEROW_MOD, I, LALT)
MT_MACRO(hm_o, o_homerow_mod, O_HOMEROW_MOD, O, LGUI)

MT_MACRO(hm_g, g_homerow_mod, G_HOMEROW_MOD, G, RALT)
MT_MACRO(hm_t, t_homerow_mod, T_HOMEROW_MOD, N, LSHFT)
MT_MACRO(hm_s, s_homerow_mod, S_HOMEROW_MOD, E, LCTRL)
MT_MACRO(hm_r, r_homerow_mod, R_HOMEROW_MOD, I, LALT)
MT_MACRO(hm_a, a_homerow_mod, A_HOMEROW_MOD, O, LGUI)

LT_MACRO(lt_tab_num, layer_tap_tab_numbers, LAYER_TAP_TAB_NUMBERS, TAB, NUMPAD)
LT_MACRO(lt_ret_nav, layer_tap_enter_navigation, LAYER_TAP_ENTER_NAVIGATION, ENTER, NAVIGATION)

/ {
    behaviors {
        hm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        tdcaps: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };
    };

    combos {
        compatible = "zmk,combos";
        TWO_KEYS_COMBO_ONE_KEYPRESS(combo_lpar, 16, 28, LPAR)
        TWO_KEYS_COMBO_ONE_KEYPRESS(combo_lbkt, 15, 27, LBKT)
        TWO_KEYS_COMBO_ONE_KEYPRESS(combo_lbrc, 17, 29, LBRC)
        TWO_KEYS_COMBO_ONE_KEYPRESS(combo_rpar, 19, 32, RPAR)
        TWO_KEYS_COMBO_ONE_KEYPRESS(combo_rbkt, 20, 33, RBKT)
        TWO_KEYS_COMBO_ONE_KEYPRESS(combo_rbrc, 18, 31, RBRC)

        combo_toggle_qwerty {
            timeout-ms = <50>;
            key-positions = <4 5 6 7>;
            layers = <BASE QWERTY>;
            bindings = <&tog QWERTY>;
        };

        combo_to_base {
            timeout-ms = <50>;
            key-positions = <50 53>;
            bindings = <&to BASE>;
        };

        combo_toggle_bluetooth {
            timeout-ms = <50>;
            key-positions = <48 56>;
            layers = <BASE BLUETOOTH>;
            bindings = <&tog BLUETOOTH>;
        };

    };

    keymap {
        compatible = "zmk,keymap";
        base {
            bindings = <
                &kp GRAVE   &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                              &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp LC(W)
                &kp SQT     &kp Q       &kp W       &kp F       &kp P       &kp B                               &kp J       &kp L       &kp U       &kp Y       &kp SEMI    &kp BSLH
                &sk LSHFT   &hm_a       &hm_r       &hm_s       &hm_t       &hm_g             &tdcaps           &hm_m       &hm_n       &hm_e       &hm_i       &hm_o       &sk LSHFT
                &kp LA(TAB) &kp Z       &kp X       &kp C       &kp D       &kp V                               &kp K       &kp H       &kp COMMA   &kp DOT     &kp SLASH   &kp LC(TAB)
                                                    &kp ESC     &kp MINUS   &kp SPACE   &lt_tab_num &lt_ret_nav &kp BSPC    &kp EQUAL   &kp DELETE
                >;
        };

        numpad {
            bindings = <
                &none       &kp GRAVE   &kp SLASH   &kp COMMA   &kp DOT     &kp LBRC                            &kp F1      &kp F2      &kp F3      &kp F4      &kp F5      &none
                &none       &kp SQT     &kp N7      &kp N8      &kp N9      &kp LBKT                            &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &none
                &none       &kp SEMI    &kp N4      &kp N5      &kp N6      &kp LPAR          &to NUMPAD        &kp F11     &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &none
                &none       &kp BSLH    &kp N1      &kp N2      &kp N3      &kp N0                              &kp F12     &kt LSHFT   &kt LCTRL   &kt LALT    &kt LGUI    &none
                                                    &kp ESC     &kp MINUS   &kp SPACE   &lt_tab_num &kp ENTER   &kp BSPC    &kp EQUAL   &kp DELETE
                >;
        };
/**
        navigation_media {
            bindings = <
                &none       &none       &none      &kp C_BRI_UP &kp C_VOL_UP &none                              &kp LC(Y)   &kp LC(V)   &kp LC(C)   &kp LC(X)   &kp LC(Z)   &none    
                &none       &none       &none      &kp C_BRI_DN &kp C_VOL_DN &none                              &kp K_AGAIN &kp K_PASTE &kp K_COPY  &kp K_CUT   &kp K_UNDO  &none    
                &none       &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &kp C_MUTE        &to NAVIGATION    &kp PSCRN   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &none    
                &none       &none       &none       &none       &none       &none                               &kp INS     &kp HOME    &kp PG_DOWN &kp PG_UP   &kp END     &none
                                                    &kp ESC     &kp MINUS   &kp SPACE   &kp TAB     &lt_ret_nav &kp BSPC    &kp EQUAL   &kp DELETE
                >;
        };
**/
        navigation_media {
            bindings = <
                &none       &none       &none       &none       &none       &none                               &kp LC(Y)   &kp LC(V)   &kp LC(C)   &kp LC(X)   &kp LC(Z)   &none    
                &none       &none       &none       &none       &none       &none                               &kp K_AGAIN &kp K_PASTE &kp K_COPY  &kp K_CUT   &kp K_UNDO  &none    
                &none       &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &kp C_MUTE        &to NAVIGATION    &kp PSCRN   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &none    
                &none       &none       &none       &none       &none       &none                               &none       &none       &none       &none       &none       &none
                                                    &kp ESC     &kp MINUS   &kp SPACE   &kp TAB     &lt_ret_nav &kp BSPC    &kp EQUAL   &kp DELETE
                >;
        };

        bluetooth_power {
            bindings = <
                &none       &none       &none       &none       &none       &none                               &none       &none       &none       &none       &none       &bootloader
                &none       &none       &none       &none       &none       &none                               &none       &none       &none       &none       &none       &sys_reset
                &none   &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0       &bt BT_CLR       &none       &none       &none       &none       &none       &none    
                &none       &none       &none       &none       &none       &none                               &none       &none       &none       &none       &none       &none
                                                 &to NAVIGATION &to NUMPAD  &to BASE    &bt BT_NXT  &bt BT_PRV  &out OUT_USB &out OUT_BLE &out OUT_TOG
                >;
        };

        qwerty {
            bindings = <
                &kp ESC     &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                              &kp N6      &kp N7      &kp N8      &kp N9     &kp N0      &kp DELETE    
                &kp TAB     &kp Q       &kp W       &kp E       &kp R       &kp T                               &kp Y       &kp U       &kp I       &kp O      &kp P       &kp PG_UP    
                &kp LSHFT   &kp A       &kp S       &kp D       &kp F       &kp G             &tdcaps           &kp H       &kp J       &kp K       &kp L      &kp SEMI    &kp PG_DN
                &kp LCTRL   &kp Z       &kp X       &kp C       &kp V       &kp B                               &kp N       &kp M       &kp COMMA   &kp DOT    &kp SLASH   &kp LGUI
                                                    &kp MINUS   &kp SPACE   &kp TAB     &kp GRAVE   &kp LALT    &kp ENTER   &kp BSPC    &kp EQUAL
                >;
        };
    };
};